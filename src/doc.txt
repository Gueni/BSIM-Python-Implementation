# BSIM3v3 MOSFET Model Documentation

## Overview
The BSIM3v3 (Berkeley Short-channel IGFET Model version 3.3) is a sophisticated MOSFET model developed at UC Berkeley for circuit simulation. This implementation models the drain current (Ids) and other characteristics of MOSFET transistors based on terminal voltages and physical parameters.
 
### Key Features:
- **Comprehensive Physical Modeling**: Includes short-channel effects, narrow width effects, mobility degradation, velocity saturation, and more
- **Multiple Operating Regions**: Handles subthreshold, linear, and saturation regions with smooth transitions
- **Temperature Dependence**: Models temperature effects on threshold voltage, mobility, and other parameters
- **Advanced Effects**: Includes DIBL (Drain-Induced Barrier Lowering), channel length modulation, and parasitic resistances
- **Smooth Transitions**: Uses smoothing functions for continuous behavior across operating regions

### Model Parameters:
The model includes over 50 physical parameters covering:
- Threshold voltage characteristics
- Mobility degradation
- Velocity saturation
- Channel length modulation
- Subthreshold conduction
- Temperature effects
- Parasitic resistances
- Geometry effects

Here's the documentation for the `BSIM3v3_Model` class functions in a table format:
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| Function Name                | Description                                   | Parameters                                                     | Returns                         |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| __init__(self)               | Initializes BSIM3v3 model with default        | None                                                           | None                            |
|                              | parameters for 180nm NMOS transistor          |                                                               |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| ni(self, T)                  | Calculates intrinsic carrier concentration    | T (float): Temperature in Kelvin                               | float: Intrinsic carrier        |
|                              | based on temperature                         |                                                               | concentration (m⁻³)             |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| v_t(self, T)                 | Calculates thermal voltage (kT/q)            | T (float): Temperature in Kelvin                               | float: Thermal voltage (V)      |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| Phi_s(self, T)               | Calculates surface potential                 | T (float): Temperature in Kelvin                               | float: Surface potential (V)    |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| Xdep0(self, T)               | Calculates zero-bias depletion width         | T (float): Temperature in Kelvin                               | float: Depletion width (m)      |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| Vbi(self, T)                 | Calculates built-in potential                | T (float): Temperature in Kelvin                               | float: Built-in potential (V)   |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_Rds(self, Vds,     | Calculates bias-dependent source/drain       | Vds (float): Drain-source voltage                              | float: Source/drain             |
| Vgs, Vbs, T)                 | resistance                                    | Vgs (float): Gate-source voltage                               | resistance (Ω)                  |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| Rdsw_T_dependent(self, T)    | Calculates temperature-dependent Rdsw        | T (float): Temperature                                         | float: Temperature-adjusted Rdsw|
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_V_th(self, Vds,    | Calculates threshold voltage including       | Vds (float): Drain-source voltage                              | float: Threshold voltage (V)    |
| Vbs, T)                      | all effects                                   | Vbs (float): Bulk-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| vth_T_dependent(self, Vds,   | Calculates temperature-dependent Vth         | Vds (float): Drain-source voltage                              | float: Temperature-adjusted Vth |
| Vbs, T)                      |                                               | Vbs (float): Bulk-source voltage                               | (V)                             |
|                              |                                               | T (float): Temperature                                         |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_mobility(self,     | Calculates effective mobility with           | Vgs (float): Gate-source voltage                               | float: Effective mobility       |
| Vgs, T, Vds, Vbs)            | degradation effects                           | T (float): Temperature                                         | (m²/V·s)                        |
|                              |                                               | Vds (float): Drain-source voltage                              |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_Vgsteff(self, Vgs, | Calculates effective Vgs-Vth with            | Vgs (float): Gate-source voltage                               | float: Effective gate overdrive |
| T, Vds, Vbs)                 | subthreshold smoothing                       | T (float): Temperature                                         | (V)                             |
|                              |                                               | Vds (float): Drain-source voltage                              |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_Vdsat(self, Vgs,   | Calculates saturation voltage                | Vgs (float): Gate-source voltage                               | float: Saturation voltage (V)   |
| Vbs, T, Vds)                 |                                               | Vbs (float): Bulk-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
|                              |                                               | Vds (float): Drain-source voltage                              |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| Vsat_T_dependent(self, T)    | Calculates temperature-dependent saturation  | T (float): Temperature                                         | float: Saturation velocity (m/s)|
|                              | velocity                                      |                                                               |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_Abulk(self, T, Vbs)| Calculates bulk charge effect coefficient    | T (float): Temperature                                         | float: Bulk charge coefficient  |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_Vdseff(self, Vds,  | Calculates effective Vds with smoothing      | Vds (float): Drain-source voltage                              | float: Effective Vds (V)        |
| Vgs, Vbs, T)                 |                                               | Vgs (float): Gate-source voltage                               |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_subthreshold_       | Calculates subthreshold current              | Vgs (float): Gate-source voltage                               | float: Subthreshold current (A) |
| current(self, Vgs, Vds, T,   |                                               | Vds (float): Drain-source voltage                              |                                 |
| Vbs)                         |                                               | T (float): Temperature                                         |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_linear_current(     | Calculates linear region current             | Vds (float): Drain-source voltage                              | float: Linear current (A)       |
| self, Vds, Vgs, T, Vbs)      |                                               | Vgs (float): Gate-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_saturation_         | Calculates saturation region current         | Vgs (float): Gate-source voltage                               | float: Saturation current (A)   |
| current(self, Vgs, Vds, Vbs, |                                               | Vds (float): Drain-source voltage                              |                                 |
| T)                           |                                               | Vbs (float): Bulk-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| Single_Current_Expression(    | Unified current expression for all regions   | Vgs (float): Gate-source voltage                               | float: Drain current (A)        |
| self, Vgs, Vds, Vbs, T)      |                                               | Vds (float): Drain-source voltage                              |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| calculate_substrate_current(  | Calculates substrate current                 | Vgs (float): Gate-source voltage                               | float: Substrate current (A)    |
| self, Vgs, Vds, Vbs, T)      |                                               | Vds (float): Drain-source voltage                              |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage                               |                                 |
|                              |                                               | T (float): Temperature                                         |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+
| compute(self, Vgs, Vds,       | Main interface for current calculation       | Vgs (float): Gate-source voltage                               | float: Drain current (A)        |
| Vbs=0.0, T=300.0)            |                                               | Vds (float): Drain-source voltage                              |                                 |
|                              |                                               | Vbs (float): Bulk-source voltage (default 0.0)                 |                                 |
|                              |                                               | T (float): Temperature (default 300K)                          |                                 |
+------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------------+


use case : 

# BSIM3v3 MOSFET Model Documentation

## Overview

This documentation describes how to use the BSIM3v3 MOSFET model implementation for circuit simulation and analysis. The implementation consists of three main files:

1. `BSIM3v3_2.py` - The core BSIM3v3 model implementation
2. `main.py` - Example usage of the model
3. `Plot.py` - Visualization and comparison tools

## Example Use Case

### 1. Basic Simulation

Here's how to use the BSIM3v3 model to simulate MOSFET characteristics:

```python
from BSIM3v3_2 import BSIM3v3_Model

# Initialize the model
model = BSIM3v3_Model()

# Define simulation conditions
Vgs = 1.5  # Gate-source voltage (V)
Vds = 1.0  # Drain-source voltage (V)
Vbs = 0.0  # Bulk-source voltage (V)
T = 300    # Temperature (K)

# Compute drain current
Ids = model.compute(Vgs, Vds, Vbs, T)
print(f"Drain current: {Ids:.3e} A")
```

### 2. Sweeping Parameters (as in main.py)

The `main.py` file shows how to perform parameter sweeps and save results:

```python
import numpy as np
import pandas as pd
from BSIM3v3_2 import BSIM3v3_Model

# Define parameter ranges
points = 10     
Vgs_values = np.linspace(0, 20, points)
Vds_values = np.linspace(0, 10, points)
T_values = np.linspace(300, 400.0, points)

# Initialize model
model = BSIM3v3_Model()

# Simulation function
def simulate_model(model, T_values, Vgs_values, Vds_values, path):
    records = []
    combinations = [(T, Vgs, Vds) for T in T_values for Vgs in Vgs_values for Vds in Vds_values]
    
    for i, (T, Vgs, Vds) in enumerate(combinations):
        Id = model.compute(Vgs, Vds, 0.0, T)
        records.append({
            'time': i // len(combinations),
            'T': T,
            'VGS': Vgs,
            'VDS': Vds,
            'ID': Id                
        })
    
    df = pd.DataFrame(records)
    df.to_csv(path, index=False)

# Run simulation
output_path = "BSIM3v3_simulation.csv"
simulate_model(model, T_values, Vgs_values, Vds_values, output_path)
```

### 3. Visualization (as in Plot.py)

The `Plot.py` file provides tools to visualize and compare simulation results:

```python
from Plot import MOSFETModelComparer

# List of CSV files to compare (can be just one)
csv_files = ["BSIM3v3_simulation.csv"]

# Create and configure plotter
plotter = MOSFETModelComparer(csv_files, output_html="MOSFET_analysis.html")

# Generate plots
plotter.plot()
```

This will create an interactive HTML file with three types of plots:
1. Drain current vs. Temperature (at fixed Vgs and Vds)
2. Drain current vs. Gate voltage (for different Vds values)
3. Drain current vs. Drain voltage (for different Vgs values)

## Key Features

1. **Comprehensive BSIM3v3 Implementation**:
   - Threshold voltage calculation with short-channel, narrow width, and DIBL effects
   - Mobility degradation effects
   - Velocity saturation
   - Channel length modulation
   - Subthreshold conduction
   - Temperature effects
   - Parasitic resistance effects

2. **Visualization Capabilities**:
   - Interactive plots with dropdown menus to select models
   - Multiple plot types showing different characteristics
   - HTML output for easy sharing

3. **Parameter Sweeps**:
   - Easy simulation across ranges of Vgs, Vds, and temperature
   - CSV output for further analysis

## Advanced Usage

### Customizing Model Parameters

You can modify model parameters after initialization:

```python
model = BSIM3v3_Model()

# Change oxide thickness (in meters)
model.Tox = 2e-9  
model.Cox = model.epsOx / model.Tox  # Must update Cox when changing Tox

# Change channel length and width (in meters)
model.Leff = 100e-9
model.Weff = 1e-6

# Change threshold voltage parameters
model.Vth0 = 0.5  # Zero-bias threshold voltage
model.K1 = 0.6    # First body effect coefficient
```

### Accessing Intermediate Calculations

The model provides methods to access intermediate calculations:

```python
# Get threshold voltage
Vth = model.vth_T_dependent(Vds, Vbs, T)

# Get effective mobility
mobility = model.calculate_mobility(Vgs, T, Vds, Vbs)

# Get saturation voltage
Vdsat = model.calculate_Vdsat(Vgs, Vbs, T, Vds)
```

### Standalone Analysis

The model can generate its own comprehensive characterization plots:

```python
model = BSIM3v3_Model()
model.__init__()  # This will automatically generate and open an HTML with characterization plots
```

## Troubleshooting

1. **Negative discriminant errors**: These may occur in Vdsat calculations. Try:
   - Reducing voltage ranges
   - Checking parameter values (especially mobility and velocity saturation)
   
2. **Unphysical results**: Verify:
   - All parameters are in correct units (mostly SI units)
   - Temperature is in Kelvin
   - Voltages are reasonable for the technology

3. **Visualization issues**: Ensure:
   - CSV files are properly formatted
   - Required columns (T, VGS, VDS, ID) are present
   - File paths are correct

This implementation provides a comprehensive BSIM3v3 model that can be easily integrated into circuit simulations or used for device characterization.




////////************************************///////////////////////***********************************************
# Shichman-Hodges MOSFET Model Documentation

## Overview

The Shichman-Hodges model (Level 1 MOSFET model) is a basic analytical model for MOSFET transistors that provides a simple representation of transistor behavior in three operating regions: cutoff, linear, and saturation.

## Model Parameters

| Parameter Name      | Description | Units | Typical Value |
|---------------------|-------------|-------|---------------|
| **Physical Constants** | | | |
| `q` | Elementary charge | C | 1.602176634e-19 |
| `k` | Boltzmann constant | J/K | 1.380649e-23 |
| `EG0` | Energy gap at 0K | eV | 1.16 |
| `EGSLOPE` | Temperature coefficient for energy gap | eV/K | 4.73e-4 |
| `EGTEMP` | Temperature parameter for energy gap | K | 636 |
| `NI0` | Intrinsic carrier concentration at TNOM | cm⁻³ | 1.45e10 |
| `NITEXP` | Temperature exponent for intrinsic carrier concentration | - | 1.5 |
| `TNOM` | Nominal temperature | K | 300 |
| **MOSFET Parameters** | | | |
| `TPG` | Gate material type (0=Al, ±1=PolySi) | - | 0 or ±1 |
| `NGATE` | Gate doping concentration | cm⁻³ | 1e20 |
| `NSS` | Interface trap density | cm⁻² | 1e10 |
| `COX` | Oxide capacitance per unit area | F/cm² | 3.45e-13 |
| `DELVTO` | Threshold voltage adjustment | V | 0.0 |
| `PHI` | Bulk Fermi potential | V | 0.7 |
| `GAMMA` | Body effect coefficient | V^1/2 | 0.5 |
| `PHIMS_OFFSET` | Work function offset for Al gates | V | 0.05 |
| `KP` | Transconductance parameter | µA/V² | 50-200 |
| `LAMBDA` | Channel length modulation parameter | V⁻¹ | 0.01-0.1 |
| `Weff` | Effective channel width | µm | 1.0 |
| `Leff` | Effective channel length | µm | 0.5 |
| `ch_type` | Channel type (1=NMOS, -1=PMOS) | - | 1 or -1 |

## Class Methods
| Method | Parameters | Returns | Description |
|--------|-----------|---------|-------------|
| `vto(T)` | `T`: Temperature (K) | V | Calculates zero-bias threshold voltage at temperature T |
| `vth(T, vsb)` | `T`: Temperature (K)<br>`vsb`: Source-bulk voltage (V) | V | Calculates threshold voltage including body bias effect |
| `compute(Vgs, Vds, vsb, T)` | `Vgs`: Gate-source voltage (V)<br>`Vds`: Drain-source voltage (V)<br>`vsb`: Source-bulk voltage (V) [default: 0.0]<br>`T`: Temperature (K) [default: 350] | A | Computes drain current in appropriate operating region |

## Usage Example

```python
from LV_1_Shichman_Hodges import ShichmanHodgesModel

model = ShichmanHodgesModel()

# Calculate current in saturation region
Id = model.compute(Vgs=2.5, Vds=3.0, vsb=0.0, T=300)
print(f"Drain current: {Id:.6f} A")

# Calculate threshold voltages
print(f"Vth @ 300K: {model.vth(T=300, vsb=0.0):.3f} V")
print(f"Vth @ 350K: {model.vth(T=350, vsb=0.0):.3f} V")
```

## Key Features

- Three operating regions:
  - Cutoff (Vgs ≤ Vth)
  - Linear (Vds < Vgs - Vth)
  - Saturation (Vds ≥ Vgs - Vth)
- Temperature-dependent threshold voltage
- Body bias effect modeling
- Channel length modulation effect

## Limitations

1. Level 1 model limitations:
   - No short-channel effects
   - No mobility degradation
   - No subthreshold conduction
   - No quantum effects

2. Ensure all parameters are properly set before calculations.